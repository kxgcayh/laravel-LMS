/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/js/app.js":
/*!*****************************!*\
  !*** ./resources/js/app.js ***!
  \*****************************/
/***/ (() => {

eval("/*\r\nTemplate Name: Ubold - Responsive Bootstrap 4 Admin Dashboard\r\nAuthor: CoderThemes\r\nWebsite: https://coderthemes.com/\r\nContact: support@coderthemes.com\r\nFile: Main Js File\r\n*/\n!function ($) {\n  \"use strict\";\n\n  var Components = function Components() {}; //initializing tooltip\n\n\n  Components.prototype.initTooltipPlugin = function () {\n    $.fn.tooltip && $('[data-toggle=\"tooltip\"]').tooltip();\n  }, //initializing popover\n  Components.prototype.initPopoverPlugin = function () {\n    $.fn.popover && $('[data-toggle=\"popover\"]').popover();\n  }, //initializing toast\n  Components.prototype.initToastPlugin = function () {\n    $.fn.toast && $('[data-toggle=\"toast\"]').toast();\n  }, //initializing form validation\n  Components.prototype.initFormValidation = function () {\n    $(\".needs-validation\").on('submit', function (event) {\n      $(this).addClass('was-validated');\n\n      if ($(this)[0].checkValidity() === false) {\n        event.preventDefault();\n        event.stopPropagation();\n        return false;\n      }\n\n      return true;\n    });\n  }, // Counterup\n  Components.prototype.initCounterUp = function () {\n    var delay = $(this).attr('data-delay') ? $(this).attr('data-delay') : 100; //default is 100\n\n    var time = $(this).attr('data-time') ? $(this).attr('data-time') : 1200; //default is 1200\n\n    $('[data-plugin=\"counterup\"]').each(function (idx, obj) {\n      $(this).counterUp({\n        delay: delay,\n        time: time\n      });\n    });\n  }, //peity charts\n  Components.prototype.initPeityCharts = function () {\n    $('[data-plugin=\"peity-pie\"]').each(function (idx, obj) {\n      var colors = $(this).attr('data-colors') ? $(this).attr('data-colors').split(\",\") : [];\n      var width = $(this).attr('data-width') ? $(this).attr('data-width') : 20; //default is 20\n\n      var height = $(this).attr('data-height') ? $(this).attr('data-height') : 20; //default is 20\n\n      $(this).peity(\"pie\", {\n        fill: colors,\n        width: width,\n        height: height\n      });\n    }); //donut\n\n    $('[data-plugin=\"peity-donut\"]').each(function (idx, obj) {\n      var colors = $(this).attr('data-colors') ? $(this).attr('data-colors').split(\",\") : [];\n      var width = $(this).attr('data-width') ? $(this).attr('data-width') : 20; //default is 20\n\n      var height = $(this).attr('data-height') ? $(this).attr('data-height') : 20; //default is 20\n\n      $(this).peity(\"donut\", {\n        fill: colors,\n        width: width,\n        height: height\n      });\n    });\n    $('[data-plugin=\"peity-donut-alt\"]').each(function (idx, obj) {\n      $(this).peity(\"donut\");\n    }); // line\n\n    $('[data-plugin=\"peity-line\"]').each(function (idx, obj) {\n      $(this).peity(\"line\", $(this).data());\n    }); // bar\n\n    $('[data-plugin=\"peity-bar\"]').each(function (idx, obj) {\n      var colors = $(this).attr('data-colors') ? $(this).attr('data-colors').split(\",\") : [];\n      var width = $(this).attr('data-width') ? $(this).attr('data-width') : 20; //default is 20\n\n      var height = $(this).attr('data-height') ? $(this).attr('data-height') : 20; //default is 20\n\n      $(this).peity(\"bar\", {\n        fill: colors,\n        width: width,\n        height: height\n      });\n    });\n  }, Components.prototype.initKnob = function () {\n    $('[data-plugin=\"knob\"]').each(function (idx, obj) {\n      $(this).knob();\n    });\n  }, Components.prototype.initTippyTooltips = function () {\n    if ($('[data-plugin=\"tippy\"]').length > 0) tippy('[data-plugin=\"tippy\"]');\n  }, Components.prototype.initShowPassword = function () {\n    $(\"[data-password]\").on('click', function () {\n      if ($(this).attr('data-password') == \"false\") {\n        $(this).siblings(\"input\").attr(\"type\", \"text\");\n        $(this).attr('data-password', 'true');\n        $(this).addClass(\"show-password\");\n      } else {\n        $(this).siblings(\"input\").attr(\"type\", \"password\");\n        $(this).attr('data-password', 'false');\n        $(this).removeClass(\"show-password\");\n      }\n    });\n  }, Components.prototype.initMultiDropdown = function () {\n    $('.dropdown-menu a.dropdown-toggle').on('click', function (e) {\n      if (!$(this).next().hasClass('show')) {\n        $(this).parents('.dropdown-menu').first().find('.show').removeClass(\"show\");\n      }\n\n      var $subMenu = $(this).next(\".dropdown-menu\");\n      $subMenu.toggleClass('show');\n      return false;\n    });\n  }, //initilizing\n  Components.prototype.init = function () {\n    this.initTooltipPlugin(), this.initPopoverPlugin(), this.initToastPlugin(), this.initFormValidation(), this.initCounterUp(), this.initPeityCharts(), this.initKnob();\n    this.initTippyTooltips();\n    this.initShowPassword();\n    this.initMultiDropdown();\n  }, $.Components = new Components(), $.Components.Constructor = Components;\n}(window.jQuery), function ($) {\n  \"use strict\";\n  /**\r\n  Portlet Widget\r\n  */\n\n  var Portlet = function Portlet() {\n    this.$body = $(\"body\"), this.$portletIdentifier = \".card\", this.$portletCloser = '.card a[data-toggle=\"remove\"]', this.$portletRefresher = '.card a[data-toggle=\"reload\"]';\n  }; //on init\n\n\n  Portlet.prototype.init = function () {\n    // Panel closest\n    var $this = this;\n    $(document).on(\"click\", this.$portletCloser, function (ev) {\n      ev.preventDefault();\n      var $portlet = $(this).closest($this.$portletIdentifier);\n      var $portlet_parent = $portlet.parent();\n      $portlet.remove();\n\n      if ($portlet_parent.children().length == 0) {\n        $portlet_parent.remove();\n      }\n    }); // Panel Reload\n\n    $(document).on(\"click\", this.$portletRefresher, function (ev) {\n      ev.preventDefault();\n      var $portlet = $(this).closest($this.$portletIdentifier); // This is just a simulation, nothing is going to be reloaded\n\n      $portlet.append('<div class=\"card-disabled\"><div class=\"card-portlets-loader\"></div></div>');\n      var $pd = $portlet.find('.card-disabled');\n      setTimeout(function () {\n        $pd.fadeOut('fast', function () {\n          $pd.remove();\n        });\n      }, 500 + 300 * (Math.random() * 5));\n    });\n  }, //\n  $.Portlet = new Portlet(), $.Portlet.Constructor = Portlet;\n}(window.jQuery), function ($) {\n  'use strict';\n\n  var App = function App() {\n    this.$body = $('body'), this.$window = $(window);\n  };\n  /** \r\n   * Initlizes the controls\r\n  */\n\n\n  App.prototype.initControls = function () {\n    // Preloader\n    $(window).on('load', function () {\n      $('#status').fadeOut();\n      $('#preloader').delay(350).fadeOut('slow');\n    });\n    $('[data-toggle=\"fullscreen\"]').on(\"click\", function (e) {\n      e.preventDefault();\n      $('body').toggleClass('fullscreen-enable');\n\n      if (!document.fullscreenElement &&\n      /* alternative standard method */\n      !document.mozFullScreenElement && !document.webkitFullscreenElement) {\n        // current working methods\n        if (document.documentElement.requestFullscreen) {\n          document.documentElement.requestFullscreen();\n        } else if (document.documentElement.mozRequestFullScreen) {\n          document.documentElement.mozRequestFullScreen();\n        } else if (document.documentElement.webkitRequestFullscreen) {\n          document.documentElement.webkitRequestFullscreen(Element.ALLOW_KEYBOARD_INPUT);\n        }\n      } else {\n        if (document.cancelFullScreen) {\n          document.cancelFullScreen();\n        } else if (document.mozCancelFullScreen) {\n          document.mozCancelFullScreen();\n        } else if (document.webkitCancelFullScreen) {\n          document.webkitCancelFullScreen();\n        }\n      }\n    });\n    document.addEventListener('fullscreenchange', exitHandler);\n    document.addEventListener(\"webkitfullscreenchange\", exitHandler);\n    document.addEventListener(\"mozfullscreenchange\", exitHandler);\n\n    function exitHandler() {\n      if (!document.webkitIsFullScreen && !document.mozFullScreen && !document.msFullscreenElement) {\n        console.log('pressed');\n        $('body').removeClass('fullscreen-enable');\n      }\n    }\n  }, //initilizing\n  App.prototype.init = function () {\n    $.Portlet.init();\n    $.Components.init();\n    this.initControls(); // init layout\n\n    this.layout = $.LayoutThemeApp;\n    this.rightBar = $.RightBar;\n    this.rightBar.layout = this.layout;\n    this.layout.rightBar = this.rightBar;\n    this.layout.init();\n    this.rightBar.init(this.layout); // showing the sidebar on load if user is visiting the page first time only\n\n    var bodyConfig = this.$body.data('layout');\n\n    if (window.sessionStorage && bodyConfig && bodyConfig.hasOwnProperty('showRightSidebarOnPageLoad') && bodyConfig['showRightSidebarOnPageLoad']) {\n      var alreadyVisited = sessionStorage.getItem(\"_UBOLD_VISITED_\");\n\n      if (!alreadyVisited) {\n        $.RightBar.toggleRightSideBar();\n        sessionStorage.setItem(\"_UBOLD_VISITED_\", true);\n      }\n    }\n  }, $.App = new App(), $.App.Constructor = App;\n}(window.jQuery), //initializing main application module\nfunction ($) {\n  \"use strict\";\n\n  $.App.init();\n}(window.jQuery); // Waves Effect\n\nWaves.init(); // Feather Icons\n\nfeather.replace();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/js/app.js\n");

/***/ }),

/***/ "./resources/sass/app.scss":
/*!*********************************!*\
  !*** ./resources/sass/app.scss ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n// extracted by mini-css-extract-plugin\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvc2Fzcy9hcHAuc2Nzcz80NzVmIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSIsImZpbGUiOiIuL3Jlc291cmNlcy9zYXNzL2FwcC5zY3NzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gZXh0cmFjdGVkIGJ5IG1pbmktY3NzLWV4dHJhY3QtcGx1Z2luXG5leHBvcnQge307Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./resources/sass/app.scss\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		if(__webpack_module_cache__[moduleId]) {
/******/ 			return __webpack_module_cache__[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = __webpack_modules__;
/******/ 	
/******/ 	// the startup function
/******/ 	// It's empty as some runtime module handles the default behavior
/******/ 	__webpack_require__.x = x => {}
/************************************************************************/
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop)
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/jsonp chunk loading */
/******/ 	(() => {
/******/ 		// no baseURI
/******/ 		
/******/ 		// object to store loaded and loading chunks
/******/ 		// undefined = chunk not loaded, null = chunk preloaded/prefetched
/******/ 		// Promise = chunk loading, 0 = chunk loaded
/******/ 		var installedChunks = {
/******/ 			"/js/app": 0
/******/ 		};
/******/ 		
/******/ 		var deferredModules = [
/******/ 			["./resources/js/app.js"],
/******/ 			["./resources/sass/app.scss"]
/******/ 		];
/******/ 		// no chunk on demand loading
/******/ 		
/******/ 		// no prefetching
/******/ 		
/******/ 		// no preloaded
/******/ 		
/******/ 		// no HMR
/******/ 		
/******/ 		// no HMR manifest
/******/ 		
/******/ 		var checkDeferredModules = x => {};
/******/ 		
/******/ 		// install a JSONP callback for chunk loading
/******/ 		var webpackJsonpCallback = (parentChunkLoadingFunction, data) => {
/******/ 			var [chunkIds, moreModules, runtime, executeModules] = data;
/******/ 			// add "moreModules" to the modules object,
/******/ 			// then flag all "chunkIds" as loaded and fire callback
/******/ 			var moduleId, chunkId, i = 0, resolves = [];
/******/ 			for(;i < chunkIds.length; i++) {
/******/ 				chunkId = chunkIds[i];
/******/ 				if(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {
/******/ 					resolves.push(installedChunks[chunkId][0]);
/******/ 				}
/******/ 				installedChunks[chunkId] = 0;
/******/ 			}
/******/ 			for(moduleId in moreModules) {
/******/ 				if(__webpack_require__.o(moreModules, moduleId)) {
/******/ 					__webpack_require__.m[moduleId] = moreModules[moduleId];
/******/ 				}
/******/ 			}
/******/ 			if(runtime) runtime(__webpack_require__);
/******/ 			if(parentChunkLoadingFunction) parentChunkLoadingFunction(data);
/******/ 			while(resolves.length) {
/******/ 				resolves.shift()();
/******/ 			}
/******/ 		
/******/ 			// add entry modules from loaded chunk to deferred list
/******/ 			if(executeModules) deferredModules.push.apply(deferredModules, executeModules);
/******/ 		
/******/ 			// run deferred modules when all chunks ready
/******/ 			return checkDeferredModules();
/******/ 		}
/******/ 		
/******/ 		var chunkLoadingGlobal = self["webpackChunk"] = self["webpackChunk"] || [];
/******/ 		chunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));
/******/ 		chunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));
/******/ 		
/******/ 		function checkDeferredModulesImpl() {
/******/ 			var result;
/******/ 			for(var i = 0; i < deferredModules.length; i++) {
/******/ 				var deferredModule = deferredModules[i];
/******/ 				var fulfilled = true;
/******/ 				for(var j = 1; j < deferredModule.length; j++) {
/******/ 					var depId = deferredModule[j];
/******/ 					if(installedChunks[depId] !== 0) fulfilled = false;
/******/ 				}
/******/ 				if(fulfilled) {
/******/ 					deferredModules.splice(i--, 1);
/******/ 					result = __webpack_require__(__webpack_require__.s = deferredModule[0]);
/******/ 				}
/******/ 			}
/******/ 			if(deferredModules.length === 0) {
/******/ 				__webpack_require__.x();
/******/ 				__webpack_require__.x = x => {};
/******/ 			}
/******/ 			return result;
/******/ 		}
/******/ 		var startup = __webpack_require__.x;
/******/ 		__webpack_require__.x = () => {
/******/ 			// reset startup function so it can be called again when more startup code is added
/******/ 			__webpack_require__.x = startup || (x => {});
/******/ 			return (checkDeferredModules = checkDeferredModulesImpl)();
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	// run startup
/******/ 	__webpack_require__.x();
/******/ })()
;